# -*- coding: utf-8 -*-
"""BUILT IN FUNCTIONS

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17bTTJ7Q2zRv_1r1n0pVK_9Y8uS2CFoyH
"""



"""#1 python abs()
The python abs() function is used to return the absolute value of a number. It takes only one argument, a number whose absolute value is to be returned. The argument can be an integer and floating-point number. If the argument is a complex number, then, abs() returns its magnitude.
"""

int=100
print(abs(int))

float=-10.20
print(abs(float)) # we give float point they can give the floating point after 1 digit

int=-200    # we give the value is negative it will be genarate the put put positive
print(abs(int))



"""#2 filter()
This simple example returns values higher than 5 using filter function.

# filter
"""

def filterdata(x):
  if x>5:
    return x
result=filter(filterdata,(1,2,6))
print(list(result))

"""# tuple"""

def filterdata(x):
  if x>110:                 # we give the high value of x but your filter data is values are low values of we given x valu
    return x
result=filter(filterdata,(1,10,30,50))                     #that time tuple is empty list is given
print(tuple(result))

"""# set"""

def filterdata(x):                   #this value is the  "  set  ""
  if x>5:
    return x
result=filter(filterdata,(1,2,6))
print(set(result))

"""Filter out negative numbers from a list:"""

v=[-1,2,-3,-4,5]
result=list(filter(lambda x: x>=0,v))
print(result)

"""filter out positive values in given list"""

int=[2,3,4,5,6,0,-1,-2,-3]
result=list(filter(lambda x:x<=0,int))
print(result)

numbers=[-1,-2,-3,-4,7,6]
result=list(filter(lambda x:x>=8,numbers)) # we giveen out of the value out put is empty list
print(result)

v=[1,3,4,2,3,2,4]
result=list(filter(lambda x: v.count(x)==1,v))
print(result)

"""#3 bin()"""

x=10
y=bin(x)
print(y)

a=8
b=bin(a)
print(b)

"""#4 char()"""

b=78
a=chr(b)
print(a)

print(chr(65))

"""# chr()"""

help(chr)

"""# bin()"""

help(bin)

"""# chr()"""

a=30
b=bin(a)
print(b)

"""# 5 max

# max()
"""

a=[1,2,3,4,5,6,7,8]
b=max(a)
print(b)

"""# 6 min

# min()
"""

a=[50,500,700,-1,0]
b=min(a)
print(b)

"""syntax:
# 7 eval(expression, globals, locals)  
The eval() function evaluates the specified expression, if the expression is a legal Python statement, it will be executed.

Syntax
eval(expression, globals, locals)
"""

x='print(66)'
eval(x)

x = 'print(55)'
eval(x)

"""# 8 **Enumarate"""

x=('venkatesh','mahendra','suresh')
y=enumerate(x)
print(list(y))

x= ('apple', 'banana', 'cherry')
y = enumerate(x)
print(list(y))

"""# 9 pow()
Definition and Usage
The pow() function returns the value of x to the power of y (xy).

If a third parameter is present, it returns x to the power of y, modulus z.

Syntax
pow(x, y, z)
"""

x=pow(9,3) # the value powers
print(x)

"""# 10 sum()"""

x=(1,2,3,4,5,6,7,8,9,0)   #the all numbers adding one by  one
print(sum(x))

def multiplication_table(rows, columns):
    for i in range(1, rows+1):
        for j in range(1, columns+1):
            print(i * j, end="\t")
        print()


multiplication_table(10, 10)

n=int(input('enter the value'))
for i in range (1,11):
  a=i*n
  print(n ,'*', i , '=', a)

def is_palindrome(n):
    return str(n) == str(n)[::-1]

def find_next_palindrome(n):
    n += 1
    while not is_palindrome(n):
        n += 1
    return n

num = 12321
next_palindrome = find_next_palindrome(num)
print("Next palindrome after", num, "is", next_palindrome)