# -*- coding: utf-8 -*-
"""iterators and genarators

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1oAXSoR4WStsVl0B4hIWdAZnCIz07xUNt
"""



"""1.Return an iterator from a tuple, and print each value:"""

mystr='venkatesh','mahendra','suresh','prabhas'
mn=iter(mystr)
print(next(mn))
print(next(mn))
print(next(mn))
print(next(mn))

mystr='venkatesh','mahendra','suresh','prabhas'
mn=iter(mystr)
print(next(mn))
print(next(mn))
print(next(mn))
print(next(mn))
print(next(mn)) # out of print statement we writen the execution next step not written iteration is stop

"""2.Even strings are iterable objects, and can return an iterator:"""

mystr='venkatesh'
mn=iter(mystr)
print(next(mn))
print(next(mn))
print(next(mn))
print(next(mn))
print(next(mn))
print(next(mn))
print(next(mn))
print(next(mn))
print(next(mn))

mystr='venkatesh'
mn=iter(mystr)
print(next(mn))

print(next(mn))

"""# Looping Through an Iterator
We can also use a for loop to iterate through an iterable object:
"""

tuple=('venkatesh','mahendra','suresh','prabhas')
for i in tuple:
  print(i)

""" --> Iterate the characters of a string"""

tuple='venkatesh'
for i in tuple:
  print(i)

"""# **[genarators](https://)**
it is used to print the one by one mutable values
"""

def mult_yield():
  str1='venkatesh'
  yield str1
  str2='mahendra'
  yield str2
x= mult_yield()
print(next(x))
print(next(x))

"""# **map () function**"""

def myfunc(a):
  return len(a)
x=map(myfunc,('venkatesh','mahendra','suresh','vikas'))
print(x)
print(list(x))

def myfunc(a):
  return len(a)
x=map(myfunc,('venkatesh','mahendra','suresh','vikas'))
print(x)
print(list())                                            #we can't wrte the print of x that time the program execution will be empty list